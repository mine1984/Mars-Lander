import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

surface = {}                #maps surface
surface_n = int(input())  # the number of points used to draw the surface of Mars.
for i in range(surface_n):
    # land_x: X coordinate of a surface point. (0 to 6999)
    # land_y: Y coordinate of a surface point. By linking all the points together in a sequential fashion, you form the surface of Mars.
    land_x, land_y = [int(j) for j in input().split()]
    surface[i]=(land_x,land_y)
#print(surface)

sites = []                 #find place to land
for i in range(surface_n-1):
    delta_y = surface[i+1][1] - surface[i][1]
    if delta_y == 0:
        sites = [surface[i][0],surface[i+1][0],surface[i][1]]
#print(sites)

def find_walls(x,y,surface,surface_n,sites):
    walls = []
    x1 = x
    y1 = y
    y2 = sites[2]
    if x < sites[0]:
        x2 = sites[0]
    else:
        if x > sites[1]:
            x2 = sites[1]
        else:
            return 'on site'
    k = (y1-y2)/(x1-x2)
    b = (x1*y2-x2*y1)/(x1-x2)
    
    for i in range(surface_n):
        if (surface[i][0] > x1 or surface[i][0] > x2) and (surface[i][0] < x1 or surface[i][0] < x2):
            y0 = surface[i][0] * k + b
            if surface[i][1] > y0:
                walls.append(surface[i])
    return walls

#def go_left(x, y, h_speed, v_speed, fuel, rotate, power, x_fin, y_fin):
#    if x - x_fin

# game loop
while True:
    # h_speed: the horizontal speed (in m/s), can be negative.
    # v_speed: the vertical speed (in m/s), can be negative.
    # fuel: the quantity of remaining fuel in liters.
    # rotate: the rotation angle in degrees (-90 to 90).
    # power: the thrust power (0 to 4).
    x, y, h_speed, v_speed, fuel, rotate, power = [int(i) for i in input().split()]

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)

    walls = find_walls(x,y,surface,surface_n,sites)
    #print(walls)
    
    x0 = (sites[0]+sites[1])/2
    y0 = sites[2]
    angle = math.atan(-1*(y-y0)/(x-x0))
    print(str(round(angle*180-180))+' 4')
    
    # rotate power. rotate is the desired rotation angle. power is the desired thrust power.
    #print("-22 4")
